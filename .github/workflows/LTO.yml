name: Compile Realme SM4250 Kernel with LTO

on:
  push:
    branches:
      - main  # Trigger on push to main branch of your new repo
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: Ponleuz12/kernel_realme_sm4250
          ref: stable
          fetch-depth: 1

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git bc bison flex libssl-dev make python3 \
            gcc-aarch64-linux-gnu clang lld cpio zip
          if [ $? -ne 0 ]; then
            echo "Failed to install dependencies"
            exit 1
          fi

      - name: Set Up Toolchain
        run: |
          git clone --depth=1 https://github.com/kdrag0n/proton-clang.git toolchain || {
            echo "Failed to clone toolchain"
            exit 1
          }
          export PATH=$PWD/toolchain/bin:$PATH
          clang --version

      - name: Configure Kernel Build
        run: |
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CC=clang
          export LD=ld.lld
          make O=out stock_defconfig || {
            echo "Defconfig failed. Available defconfigs:"
            ls -l arch/arm64/configs/
            exit 1
          }
          # Enable LTO
          sed -i 's/# CONFIG_LTO_CLANG is not set/CONFIG_LTO_CLANG=y/' out/.config || {
            echo "Failed to enable CONFIG_LTO_CLANG"
            exit 1
          }
          sed -i 's/# CONFIG_THINLTO is not set/CONFIG_THINLTO=y/' out/.config || {
            echo "Failed to enable CONFIG_THINLTO"
            exit 1
          }
          cat out/.config | grep -E "CONFIG_LTO_CLANG|CONFIG_THINLTO"

      - name: Build Kernel
        run: |
          make O=out -j$(nproc) || {
            echo "Kernel build failed"
            ls -l out/arch/arm64/boot/
            exit 1
          }

      - name: Package Kernel
        run: |
          mkdir -p kernel-package
          cp out/arch/arm64/boot/Image.gz-dtb kernel-package/ || {
            echo "Failed to copy Image.gz-dtb"
            ls -l out/arch/arm64/boot/
            exit 1
          }
          cp out/.config kernel-package/config
          zip -r kernel-package.zip kernel-package/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: kernel-package.zip
          if-no-files-found: error

      - name: Verify Build
        run: |
          ls -lh kernel-package/
          file kernel-package/Image.gz-dtb
