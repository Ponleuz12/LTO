name: 🛠 Build Kernel - Proton Clang 11 (LTO Disabled)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        repository: Ponleuz12/kernel_realme_sm4250
        ref: stable
        path: kernel

    - name: 🧰 Install Dependencies
      run: |
        sudo apt update
        sudo apt install -y bc bison flex libssl-dev make libncurses5-dev ccache curl git zstd

    - name: 📦 Download & Extract Proton Clang 11.0.0
      run: |
        mkdir -p clang
        curl -L "https://github.com/kdrag0n/proton-clang-build/releases/download/20200117/proton_clang-11.0.0-20200117.tar.zst" -o clang.tar.zst
        tar --zstd -xf clang.tar.zst -C clang --strip-components=1

    - name: ⚙️ Configure Kernel (stock_defconfig + disable LTO)
      working-directory: kernel
      run: |
        export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
        export ARCH=arm64
        export SUBARCH=arm64
        export LLVM=1
        export LLVM_IAS=1
        export CC=clang
        export CLANG_TRIPLE=aarch64-linux-gnu-

        make O=out stock_defconfig

        # Disable all LTO configs manually using sed
        sed -i '/CONFIG_LTO/d' out/.config
        sed -i '/CONFIG_THINLTO/d' out/.config
        echo "CONFIG_LTO_NONE=y" >> out/.config

        make O=out olddefconfig

    - name: 🧱 Build Kernel
      working-directory: kernel
      run: |
        export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
        export ARCH=arm64
        export SUBARCH=arm64
        export LLVM=1
        export LLVM_IAS=1
        export CC=clang
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export AR=llvm-ar
        export NM=llvm-nm
        export OBJCOPY=llvm-objcopy
        export OBJDUMP=llvm-objdump
        export STRIP=llvm-strip
        export READELF=llvm-readelf
        export LD=ld.lld

        make -j$(nproc) O=out

    - name: 📂 Clone AnyKernel3
      run: |
        git clone --depth=1 https://github.com/insetion/AnyKernel3.git AnyKernel3

    - name: 📦 Prepare Flashable Zip
      run: |
        cp kernel/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        cd AnyKernel3
        zip -r9 ../kernel-flashable.zip *

    - name: 📤 Upload Flashable Zip
      uses: actions/upload-artifact@v4
      with:
        name: Realme-Kernel-Zip
        path: kernel-flashable.zip
